<?php

/**
 * @file
 * Provide a GeoJSON Views feed style.
 */

/**
 * Render views fields to GeoJSON.
 *
 * Takes each field from a row object and renders the field as determined by the
 * field's theme.
 *
 * @param object $view
 *   View the row belongs to
 * @param object $row
 *   Row object
 *
 * @return array
 *   Object containing all the raw and rendered fields
 */
function _views_geojson_render_fields($view, $row, $index) {
  $excluded_fields = array();
  $feature = array('type' => 'Feature');
  $data_source = $view->style_plugin->options['data_source'];
  $field_ids = array_keys($view->field);

  // Pre-render fields to handle those rewritten with tokens.
  foreach ($view->field as $field_idx => $field) {
    $field->advancedRender($row);
  }

  switch ($data_source['value']) {
    case 'latlon':
      $options = array('latitude', 'longitude');
      $latitude = NULL;
      $longitude = NULL;
      foreach ($view->field as $field_idx => $field) {
        foreach ($options as $option) {
          if ($data_source[$option] == $field_idx) {
            $option = $field->advancedRender($row);
            $excluded_fields[] = $field_idx;
          }
        }
      }
      if (!empty($latitude) && !empty($longitude)) {
        $feature['geometry'] = array(
          'type' => 'Point',
          'coordinates' => array(floatval($longitude), floatval($latitude)),
        );
      }
      break;

    case 'geofield':
      $geophp = \Drupal::getContainer()->get('geofield.geophp');
      foreach ($view->field as $field_idx => $field) {
        if ($data_source['geofield'] == $field_idx) {
          $geofield = $view->style_plugin->getFieldValue($index, $field_idx);
          // FIXME: Figure this bit out. $geofield is in the format "POINT (LAT, LON)", not an array.
//          if (!empty($geofield)) {
//            $geofield = (isset($geofield[0]['wkt'])) ? $geofield[0]['wkt'] : $geofield[0]['geom'];
//          }
          $view->row_index = $index;
          $excluded_fields[] = $field_idx;
        }
      }
      if (!empty($geofield)) {
        $json = $geophp->load($geofield);
        if (is_object($json)) {
          $feature['geometry'] = \Drupal\Component\Serialization\Json::decode($json->out('json'));
        }
      }
      break;

    case 'wkt':
      foreach ($view->field as $field_idx => $field) {
        if ($data_source['wkt'] == $field_idx) {
          $wkt = $field->advanced_render($row);
          $view->row_index = $index;
          $excluded_fields[] = $field_idx;
        }
      }
      if (!empty($wkt)) {
        $json = \geoPHP::load($wkt, 'wkt');
        if (is_object($json)) {
          $feature['geometry'] = \Drupal\Component\Serialization\Json::decode($json->out('json'));
        }
      }
      break;
  }

  // Only add features with geometry data.
  if (empty($feature['geometry'])) {
    return NULL;
  }

  // Add the name and description attributes
  // as chosen through interface.
  if ($data_source['name_field']) {
    foreach ($view->field as $field_idx => $field) {
      if ($data_source['name_field'] == $field_idx) {
        $name_field = $field->advancedRender($row);
        $excluded_fields[] = $field_idx;
      }
    }
    $feature['properties']['name'] = $name_field;
  }
  else {
    $feature['properties']['name'] = '';
  }

  if ($data_source['description_field']) {
    $description_field = NULL;
    foreach ($view->field as $field_idx => $field) {
      if ($data_source['description_field'] == $field_idx) {
        $description_field = $field->advancedRender($row);
        $excluded_fields[] = $field_idx;
      }
    }
    $feature['properties']['description'] = $description_field;
  }
  else {
    $feature['properties']['description'] = '';
  }

  // Fill in attributes that are not:
  // - Coordinate fields,
  // - Name/description (already processed),
  // - Views "excluded" fields.
  foreach ($field_ids as $id) {
    $field = $view->field[$id];
    if (!in_array($id, $excluded_fields, TRUE) && !($field->options['exclude'])) {
      // Allows you to customize the name of the property by setting a label to
      // the field.
      $key = empty($field->options['label']) ? $id : $field->options['label'];
      $value_rendered = $field->advancedRender($row);
      $feature['properties'][$key] = is_numeric($value_rendered) ? floatval($value_rendered) : $value_rendered;
    }
  }

  return $feature;
}

/**
 * Encodes GeoJSON in a pretty-printed fashion.
 *
 * Included from: https://github.com/GerHobbelt/nicejson-php.
 */
function _views_geojson_encode_formatted($json) {
  if (!is_string($json)) {
    return \Drupal\Component\Serialization\Json::encode($json);
  }
  $result = '';
  $pos = 0;               // indentation level
  $strLen = strlen($json);
  $indentStr = "\t";
  $newLine = "\n";
  $prevChar = '';
  $outOfQuotes = TRUE;
  for ($i = 0; $i < $strLen; $i++) {
    // Speedup: copy blocks of input which don't matter re string detection and formatting.
    $copyLen = strcspn($json, $outOfQuotes ? " \t\r\n\",:[{}]" : "\\\"", $i);
    if ($copyLen >= 1) {
      $copyStr = substr($json, $i, $copyLen);
      // Also reset the tracker for escapes: we won't be hitting any right now
      // and the next round is the first time an 'escape' character can be seen again at the input.
      $prevChar = '';
      $result .= $copyStr;
      $i += $copyLen - 1;      // correct for the for(;;) loop
      continue;
    }

    // Grab the next character in the string
    $char = substr($json, $i, 1);

    // Are we inside a quoted string encountering an escape sequence?
    if (!$outOfQuotes && $prevChar === '\\') {
      // Add the escaped character to the result string and ignore it for the string enter/exit detection:
      $result .= $char;
      $prevChar = '';
      continue;
    }
    // Are we entering/exiting a quoted string?
    if ($char === '"' && $prevChar !== '\\') {
      $outOfQuotes = !$outOfQuotes;
    }
    // If this character is the end of an element,
    // output a new line and indent the next line
    else {
      if ($outOfQuotes && ($char === '}' || $char === ']')) {
        $result .= $newLine;
        $pos--;
        for ($j = 0; $j < $pos; $j++) {
          $result .= $indentStr;
        }
      }
      // eat all non-essential whitespace in the input as we do our own here and it would only mess up our process
      else {
        if ($outOfQuotes && FALSE !== strpos(" \t\r\n", $char)) {
          continue;
        }
      }
    }
    // Add the character to the result string
    $result .= $char;
    // always add a space after a field colon:
    if ($outOfQuotes && $char === ':') {
      $result .= ' ';
    }
    // If the last character was the beginning of an element,
    // output a new line and indent the next line
    else {
      if ($outOfQuotes && ($char === ',' || $char === '{' || $char === '[')) {
        $result .= $newLine;
        if ($char === '{' || $char === '[') {
          $pos++;
        }
        for ($j = 0; $j < $pos; $j++) {
          $result .= $indentStr;
        }
      }
    }
    $prevChar = $char;
  }
  return $result;
}
